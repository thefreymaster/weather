{"version":3,"sources":["logo.svg","components/Graph/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Graph","socket","data","yAxis","min","max","color","margin","top","right","bottom","left","xScale","type","yScale","stacked","reverse","axisTop","axisRight","axisBottom","axisLeft","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","enableGridY","colors","pointSize","enablePoints","enableGridX","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabelYOffset","useMesh","curve","crosshairType","legends","anchor","direction","justify","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","Header","Layout","Footer","Content","Sider","io","App","React","useState","window","innerHeight","height","setHeight","temperature","setTemperature","humidity","setHumidity","pressure","setPressure","inline","zones","width","innerWidth","display","useLayoutEffect","id","axios","get","then","response","catch","error","console","log","addEventListener","length","timeout","currentTemp","y","currentHumidity","currentPressure","flexDirection","justifyContent","isMobile","alignItems","icon","faWind","fontWeight","marginLeft","flexGrow","Text","disabled","className","minWidth","Title","Fragment","fontSize","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe2ab539.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.fd10fc13.svg\";","import React from 'react';\nimport axios from 'axios'\nimport { ResponsiveLine } from '@nivo/line'\n\n\nconst Graph = ({ socket, data, yAxis, min, max, color }) => {\n    return (\n        <ResponsiveLine\n            data={data}\n            margin={{ top: 50, right: 60, bottom: 50, left: 60 }}\n            xScale={{ type: 'point' }}\n            yScale={{ type: 'linear', min, max, stacked: true, reverse: false }}\n            axisTop={null}\n            axisRight={null}\n            axisBottom={null}\n            axisLeft={{\n                orient: 'left',\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: yAxis,\n                legendOffset: -40,\n                legendPosition: 'middle'\n            }}\n            enableGridY={false}\n            colors={[color]}\n            pointSize={6}\n            enablePoints={false}\n            enableGridX={false}\n            pointColor={{ theme: 'background' }}\n            pointBorderWidth={2}\n            pointBorderColor={{ from: 'serieColor' }}\n            pointLabelYOffset={-12}\n            useMesh={true}\n            curve={\"monotoneX\"}\n            crosshairType=\"cross\"\n            legends={[\n                {\n                    anchor: 'bottom',\n                    direction: 'column',\n                    justify: false,\n                    translateY: 0,\n                    itemsSpacing: 0,\n                    itemDirection: 'left-to-right',\n                    itemWidth: 80,\n                    itemHeight: 20,\n                    itemOpacity: 0.75,\n                    symbolSize: 12,\n                    symbolShape: 'circle',\n                    symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                    effects: [\n                        {\n                            on: 'hover',\n                            style: {\n                                itemBackground: 'rgba(0, 0, 0, .03)',\n                                itemOpacity: 1\n                            }\n                        }\n                    ]\n                }\n            ]}\n        />\n    )\n}\n\nexport default Graph;","import React, { useLayoutEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { getZones } from './api/rest';\nimport io from 'socket.io-client';\nimport { Layout, Typography } from 'antd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCoffee, faWater, faShower, faRadiation, faWind } from '@fortawesome/free-solid-svg-icons'\nimport { isMobile } from 'react-device-detect';\nimport Graph from './components/Graph';\nimport axios from 'axios'\nimport Loader from 'react-loader-spinner'\n\nconst { Header, Footer, Sider, Content } = Layout;\n\nconst socket = io('http://192.168.124.22:6700/');\n\n\nfunction App() {\n  const [height, setHeight] = React.useState(window.innerHeight - 129);\n  const [temperature, setTemperature] = React.useState([]);\n  const [humidity, setHumidity] = React.useState([]);\n  const [pressure, setPressure] = React.useState([]);\n\n  const inline = {\n    zones: {\n      height: height,\n      width: window.innerWidth,\n      display: 'flex',\n\n    }\n  }\n\n  React.useLayoutEffect(() => {\n    socket.on('weather_update', (data) => {\n      setTemperature([\n        {\n          id: \"temperature\",\n          color: \"hsl(57, 70%, 50%)\",\n          data: data.temperature,\n        },\n      ]);\n      setHumidity([\n        {\n          id: \"humidity\",\n          color: \"hsl(266, 70%, 50%)\",\n          data: data.humidity,\n        },\n      ]);\n      setPressure([\n        {\n          id: \"pressure\",\n          color: \"hsl(135, 70%, 50%)\",\n          data: data.pressure,\n        }\n      ]);\n    })\n    axios.get('/api/weather/history')\n      .then(response => {\n        setTemperature([\n          {\n            id: \"temperature\",\n            color: \"hsl(57, 70%, 50%)\",\n            data: response.data.temperature,\n          },\n        ]);\n        setHumidity([\n          {\n            id: \"humidity\",\n            color: \"hsl(266, 70%, 50%)\",\n            data: response.data.humidity,\n          },\n        ]);\n        setPressure([\n          {\n            id: \"pressure\",\n            color: \"hsl(135, 70%, 50%)\",\n            data: response.data.pressure,\n          }\n        ]);\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      })\n  }, [])\n\n  window.addEventListener('resize', () => {\n    setHeight(window.innerHeight - 129)\n  })\n\n  if (temperature.length === 0 || humidity.length === 0 || pressure.length === 0) {\n    return (\n      <Loader\n        type=\"Puff\"\n        color=\"#00BFFF\"\n        height={100}\n        width={100}\n        timeout={10000} //3 secs\n      />\n    );\n  }\n\n  console.log(temperature[0].data[temperature[0].data.length - 1])\n\n  const currentTemp = temperature[0].data[temperature[0].data.length - 1].y;\n  const currentHumidity = humidity[0].data[humidity[0].data.length - 1].y;\n  const currentPressure = pressure[0].data[pressure[0].data.length - 1].y;\n\n  return (\n    <Layout>\n      <Header>\n        <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: isMobile ? \"center\" : \"flex-start\", alignItems: \"center\" }}>\n          <FontAwesomeIcon color=\"white\" icon={faWind} />\n          <div style={{ color: \"white\", fontWeight: 900, marginLeft: 10 }}>SKYNET Weather Station</div>\n          <div style={{ flexGrow: 1 }} />\n          <div style={{ marginLeft: 10 }} />\n          {!isMobile && <div>\n            <Typography.Text disabled>\n              {currentTemp}° | {currentHumidity}% | {currentPressure} inHg\n            </Typography.Text>\n          </div>}\n        </div>\n      </Header>\n      <Layout>\n        <Content>\n          <div className=\"zones-container\" style={inline.zones}>\n            {isMobile\n              ?\n              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', minWidth: '100%', flexDirection: 'column' }}>\n\n                <Typography.Title disabled>{currentTemp}°</Typography.Title>\n                <Typography.Text disabled>Temperature</Typography.Text>\n\n                <Typography.Title disabled>{currentHumidity}%</Typography.Title>\n                <Typography.Text disabled>Humidity</Typography.Text>\n\n                <Typography.Title disabled>{currentPressure} inHg</Typography.Title>\n                <Typography.Text disabled>Pressure</Typography.Text>\n              </div>\n              :\n              <React.Fragment>\n                <div style={{ flexDirection: 'column', minWidth: '33%' }}>\n                  <Typography.Title disabled>{currentTemp}°</Typography.Title>\n                  <Typography.Text disabled>Temperature</Typography.Text>\n                  <Graph color=\"#29659d\" data={temperature} socket={socket} yAxis=\"Temperature\" min={50} max={90} />\n                </div>\n                <div style={{ flexDirection: 'column', minWidth: '33%' }}>\n                  <Typography.Title disabled>{currentHumidity}%</Typography.Title>\n                  <Typography.Text disabled>Humidity</Typography.Text>\n                  <Graph color=\"#29659d\" data={humidity} socket={socket} yAxis=\"Humidty\" min={0} max={100} />\n                </div>\n                <div style={{ flexDirection: 'column', minWidth: '33%' }}>\n                  <Typography.Title disabled>{currentPressure} inHg</Typography.Title>\n                  <Typography.Text disabled>Pressure</Typography.Text>\n                  <Graph color=\"#29659d\" data={pressure} socket={socket} yAxis=\"Pressure\" min={28} max={32} />\n                </div>\n              </React.Fragment>\n            }\n          </div>\n        </Content>\n      </Layout>\n      <Footer>\n        <div style={{ display: \"flex\", justifyContent: \"center\", fontSize: 11, color: \"#b4b6ba\" }}>\n          Canvas 23 Studios\n        </div>\n      </Footer>\n    </Layout>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}